import { bigEndian32StringToNumber } from '../util/converters'
import { BlockInfo } from '../classes/BlockInfo'

// See: http://mirror.informatimago.com/next/developer.apple.com/documentation/QuickTime/APIREF/INDEX/atomalphaindex.htm
const mp4ChunkDescriptions = {
  '©cpy': 'copyright information',
  '©day': 'creation date',
  '©dir': 'director',
  '©ed1': 'edit date 1',
  '©fmt': 'format',
  '©inf': 'information',
  '©prd': 'producer',
  '©prf': 'performers',
  '©req': 'software requirements',
  '©src': 'source content',
  '©wrt': 'writer',
  beha: 'sprite behavior',
  chap: 'chapter list',
  clip: 'clipping',
  clon: 'track clone',
  cmov: 'compressed movie',
  cmvd: 'compressed movie data',
  co64: '64-bit sample chunk offset',
  crgn: 'clipping region',
  crsr: 'color custom cursor',
  cspd: 'connection speed',
  ctab: 'color table',
  cufa: 'cubic panorama',
  CURS: 'custom cursor',
  cuvw: 'cubic view',
  dasz: 'data size',
  dcom: 'data compression algorithm',
  defi: 'sprite data reference',
  desc: 'graphics export description',
  dflt: 'key frame shared-data',
  dimm: 'immediate data',
  dinf: 'data information',
  dmax: 'max packet duration',
  dmed: 'length of media',
  dref: 'data reference',
  drep: 'length of repeated data',
  edts: 'edit list',
  elst: 'edit segment definitions list',
  'end ': 'ending offset of hypertext',
  enda: 'endian',
  expo: 'graphics export group',
  'ext ': 'graphics export extension',
  flap: 'sound description extension',
  flov: 'floating-point variable',
  free: 'free space',
  frma: 'chunk format',
  ftyp: 'file type',
  gmhd: 'generic media header',
  gmin: 'generic media handler',
  hdlr: 'handler',
  hinf: 'hint track statistics',
  hint: 'hint track',
  hlit: 'highlighted',
  hnti: 'hint track user data',
  hots: 'hot spot',
  hsin: 'hot spot information',
  hspa: 'hot spot parent',
  htxt: 'hypertext',
  idat: 'image data',
  idsc: 'image description',
  iicc: 'ColorSync profile',
  imag: 'sprite image',
  imap: 'input map',
  imct: 'image container',
  imda: 'sprite image data',
  imgp: 'panorama imaging parent',
  imgr: 'sprite image group',
  impn: 'panorama imaging',
  imre: 'sprite image reference',
  imrg: 'image registration',
  imrt: 'image reference type',
  '  in': 'track input',
  'jP2 ': 'JP2 (?)',
  kmat: 'compressed matte',
  link: 'link',
  load: 'track preloading information',
  LOOP: 'loop data list',
  matt: 'matte',
  maxr: 'maximum data rate',
  meta: 'metadata',
  mdat: 'media data',
  mdhd: 'media header',
  mdia: 'media',
  mime: 'MIME type',
  minf: 'media information',
  moof: 'moof (?)',
  moov: 'movie',
  mvhd: 'movie header',
  name: 'name',
  ndhd: 'node header',
  nloc: 'node location',
  nump: 'number of network packets',
  obid: 'object id',
  payt: 'payload type',
  pdat: 'panorama sample',
  PICT: 'PICT (?)',
  pmax: 'largest packet',
  pnot: 'preview reference',
  'ptv ': 'full screen mode',
  qdrg: 'QuickDraw region',
  rdrf: 'alternate movie reference',
  reso: 'resolution',
  rmcd: 'alternate movie component availability',
  rmcs: 'alternate movie CPU speed information',
  rmda: 'alternate movie data',
  rmdr: 'alternate movie data rate',
  rmla: 'alternate movie language information',
  rmqu: 'alternate movie playback quality',
  rmra: 'alternate movie reference',
  rmvc: 'alternate movie version criteria',
  scpt: 'transcript',
  'sdp ': 'SDP text',
  sean: 'outermost container',
  SelO: 'selection only list',
  skip: 'skip',
  smhd: 'sound media header',
  sprt: 'sprite',
  sptl: 'graphics export compressor',
  ssrc: 'source reference',
  sstr: 'string variable',
  stbl: 'sample table',
  stco: 'sample chunk offset',
  strt: 'starting offset',
  strv: 'string variable',
  stsc: 'sample to chunk',
  stsd: 'sample descriptions',
  stsh: 'self-contained sync samples',
  stss: 'sync samples',
  stsz: 'sample sizes',
  stts: 'sample to time',
  sync: 'synchronisation',
  tbox: 'text box',
  tcmi: 'time code media information',
  tkhd: 'track header',
  tmax: 'largest transmission time',
  tmcd: 'time code',
  tmin: 'smallest transmission time',
  tpyl: 'number of sent bytes excluding RTP headers',
  trak: 'track',
  tref: 'track reference',
  trpy: 'number of sent bytes including RTP headers',
  twdt: 'tween data type',
  twdu: 'tween duration',
  twen: 'tween entry',
  twnt: 'tween type',
  twst: 'tween start',
  '  ty': 'input type',
  udta: 'user data',
  'url ': 'url',
  uses: 'sprite subset',
  uuid: 'universal unique identifier (UUID)',
  vars: 'variables',
  vide: 'base image exporter compression information',
  vmhd: 'video media header',
  vrcp: 'QTVR node cursor parent',
  vrni: 'QTVR node node id',
  vrnp: 'QTVR node node parent',
  vrsc: 'VR world header',
  vrsg: 'VR scene name',
  wide: 'wide name placeholder',
  WLOC: 'window location',
  wtxt: 'hypertext items parent',
}

export default [
  {
    level: 2,
    pattern: RegExp(String.raw`(?<length>.{4})(?<type>${Object.keys(mp4ChunkDescriptions).join('|')})`, 'su'),
    name: ({ groups }) => `MP4 ${mp4ChunkDescriptions[groups.type]} chunk`,
    type: 'chunk',
    contents: ({ groups, index, input }) => {
      const dataLength = bigEndian32StringToNumber(groups.length)
      return input.slice(index, index + 4 + dataLength)
    },
    subBlocks: ({ groups, index, input }) => {
      const dataLength = bigEndian32StringToNumber(groups.length)
      const subBlocks = [
        {
          start: index,
          name: 'chunk length',
          type: 'intbe32',
          analysed: true,
          contents: groups.length,
        },
        {
          start: index + 4,
          name: 'chunk type',
          type: 'ascii',
          analysed: true,
          contents: groups.type,
        },
      ]
      if (dataLength > 0) {
        subBlocks.splice(2, 0, {
          start: index + 8,
          name: 'chunk data',
          type: 'unknown',
          analysed: false,
          contents: input.slice(index + 8, index + 4 + dataLength),
        })
      }
      return subBlocks
    },
  },
].map((info) => new BlockInfo(info))
